import cv2
import numpy as np

def circle_detection(image_path, min_radius, max_radius, param1, param2, min_dist):
    # Read the image and resize
    image = cv2.imread(image_path, cv2.IMREAD_COLOR)
    image = cv2.resize(image, (700, 700))
    cv2.imshow('Original',image)
    
    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # Apply GaussianBlur to reduce noise and help circle detection
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # Use HoughCircles to detect circles
    circles = cv2.HoughCircles(
        blurred,
        cv2.HOUGH_GRADIENT,
        dp=1,
        minDist=min_dist,
        param1=param1,
        param2=param2,
        minRadius=min_radius,
        maxRadius=max_radius
    )

    # If circles are found, draw them on the image
    if circles is not None:
        circles = np.uint16(np.around(circles))
        for circle in circles[0, :]:
            center = (circle[0], circle[1])
            radius = circle[2]
            
            # Draw the circle
            cv2.circle(image, center, radius, (0, 255, 0), 2)
            
            # Draw the center (red dot)
            cv2.circle(image, center, 3, (0, 0, 255), -1)

    # Display the original image and the one with detected circles
    cv2.imshow('Circles Image', image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Specify the path to your image
image_path = r"C:\Users\somaa\Desktop\DIP Lab\DIP week 1.jpg"

# Set adjusted parameters for circle detection
min_radius = 5
max_radius = 150
param1 = 50
param2 = 30
min_dist = 50

# Apply circle detection and display the results
circle_detection(image_path, min_radius, max_radius, param1, param2, min_dist)
